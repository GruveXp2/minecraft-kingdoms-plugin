/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    `java-library`
    `maven-publish`
}

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        url = uri("https://repo.papermc.io/repository/maven-public/")
    }

    maven {
        url = uri("https://oss.sonatype.org/content/groups/public/")
    }

    maven {
        url = uri("https://repo.dmulloy2.net/repository/public/")
    }

    maven {
        url = uri("https://repo.maven.apache.org/maven2/")
    }
}

dependencies {
    api("org.jetbrains:annotations:24.1.0")
    api(libs.com.fasterxml.jackson.core.jackson.databind)
    compileOnly("io.papermc.paper:paper-api:1.21.+")
}

val buildNumberFile = file("build-number.txt")
val buildNumber: Int = if (buildNumberFile.exists()) {
    val currentBuildNumber = buildNumberFile.readText().trim().toInt()
    buildNumberFile.writeText("${currentBuildNumber + 1}")
    currentBuildNumber + 1
} else {
    buildNumberFile.writeText("1")
    1
}

group = "gruvexp"
version = "1.1.3-$buildNumber"
description = "The plugin used on the kingdoms server"
java {
    toolchain.languageVersion.set(JavaLanguageVersion.of(21))
}

publishing {
    publications.create<MavenPublication>("maven") {
        from(components["java"])
    }
}

tasks.withType<JavaCompile> {
    options.encoding = "UTF-8"
}

tasks.withType<Javadoc> {
    options.encoding = "UTF-8"
}

tasks.processResources {
    val props = mapOf("version" to project.version.toString())
    inputs.properties(props)
    filteringCharset = "UTF-8"
    filesMatching("plugin.yml") {
        expand(props)
    }
}

tasks.register("incrementBuildNumber") {
    doLast {
        val currentBuildNumber = buildNumberFile.readText().trim().toInt()
        val newBuildNumber = currentBuildNumber + 1
        buildNumberFile.writeText(newBuildNumber.toString())
        println("Build number incremented to $newBuildNumber")
    }
}

tasks.register("renameJar") {
    val jarFile = layout.buildDirectory.file("libs/${project.name}-${project.version}.jar")
    val renamedFile = layout.buildDirectory.file("libs/${project.name}.jar")

    doLast {
        val jar = jarFile.get().asFile
        val renamed = renamedFile.get().asFile

        if (jar.exists()) {
            if (renamed.exists()) {
                // Delete the existing renamed file
                println("Deleting existing JAR file: ${renamed.name}")
                renamed.delete()
            }
            println("Renaming JAR file from ${jar.name} to ${renamed.name}")
            jar.renameTo(renamed)
        } else {
            println("No JAR file found to rename.")
        }
    }
}

tasks.named("jar") {
    finalizedBy("renameJar")
}